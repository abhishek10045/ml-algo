# normal equtaion method
theta <- normal_equation(x, y)
theta
normal_equation <- function(x, y) {
solve(t(x) %*% x) %*% (t(x) %*% y)
}
x
y
x <- matrix(c(rep(1, 100), 1:100), ncol = 2)
y <- 1:100 * 5 + runif(100, -25, 25)
dim(y)
length(y)
hypothesis <- function(theta, x) {
x %*% theta
}
cost_function <- function(theta, x, y) {
sum((hypothesis(theta, x) - y) ^ 2) / (2 * length(y))
}
partial_derivative_cost_function <- function(theta, x, y) {
(t(x) %*% (hypothesis(theta, x) - y)) / length(y)
}
batch_gradient_descent <- function(theth, alpha, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, x, y))
theta <- theta - alpha * partial_derivative_cost_function(theta, x, y)
}
list(theta, cost)
}
normal_equation <- function(x, y) {
solve(t(x) %*% x) %*% (t(x) %*% y)
}
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
View(x)
View(x)
y
theta <- c(1, 1)
alpha <- 0.0005
itr  <- 20
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.01
itr  <- 20
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.03
itr  <- 20
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.1
itr  <- 20
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 1
itr  <- 20
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.3
itr  <- 20
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.3
itr  <- 40
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.5
itr  <- 100
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.3
itr  <- 100
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(1, 1)
alpha <- 0.3
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
t(x) %*% x
t(x) %*% y
solve(t(x) %*% x)
solve(t(x) %*% x) %*% t(x) %*% y
normal_equation <- function(x, y) {
solve(t(x) %*% x) %*% t(x) %*% y
}
solve(t(x) %*% x) %*% t(x) %*% y
normal_equation(x, y)
hypothesis <- function(theta, x) {
1 / (1 + exp(-(x %*% theta)))
}
cost_function <- function(theta, x, y) {
h_theta <- hypothesis(theta, x)
-sum(y * log(h_theta) + (1 - y) * log(1 - h_theta)) / length(y)
}
partial_derivative_cost_function <- function(theta, x, y) {
(t(x) %*% (hypothesis(theta, x) - y)) / length(y)
}
batch_gradient_descent <- function(theth, alpha, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, x, y))
theta <- theta - alpha * partial_derivative_cost_function(theta, x, y)
}
list(theta, cost)
}
alpha <- 1
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
x_1 <- c(1, 2, 3, 8, 10)
x_2 <- c(4, 2, 1, 12, 11)
x <- matrix(data = c(rep(1, 5), x_1, x_2), ncol = 3)
y <- c(1, 1, 1, 0, 0)
alpha <- 1
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
x_1 <- c(1, 2, 3, 8, 10)
x_2 <- c(4, 2, 1, 12, 11)
x <- matrix(data = c(rep(1, 5), x_1, x_2), ncol = 3)
y <- c(1, 1, 1, 0, 0)
theta <- c(-6, 1, 1)
alpha <- 1
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
alpha <- 1.5
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
alpha <- 1.0
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
theta <- c(-6, 1, 1)
alpha <- 1.0
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta <- c(-6, 1, 1)
alpha <- 10
itr  <- 50
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta <- c(-6, 1, 1)
alpha <- 0.5
itr  <- 50
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
cost_function(theta, x, y)
theta <- c(-6, 1, 1)
alpha <- 0.5
itr  <- 50
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
cost_function(theta, x, y)
theta <- c(-6, 1, 1)
alpha <- 0.5
itr  <- 500
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
cost_function(theta, x, y)
theta
plot(x_2, x_1, col = ifelse(y == 1, 'red', 'blue'))
theta[1]
intercept <- theta[1] / theta[2]
slope <- theta[3] / theta[1]
abline(intercept, slope)
abline(intercept, slope)
abline(a = intercept, b = slope)
help(abline)
intercept
slope
abline(a = intercept, b = slope, col = 'blue')
plot(x_1 ~ _2)
plot(x_1 ~ x_2)
abline(a = intercept, b = slope, col = 'blue')
abline(a = intercept, b = slope, col = 'blue')
abline(c(intercept, slope), col = 'blue')
abline(c(intercept, slope), col = 'blue')
abline(c(intercept, slope), col = 'blue')
abline(v = 2, col = 'blue')
abline(a = -intercept, b = -slope, col = 'blue')
abline(a = -intercept, b = -slope, col = 'blue')
abline(a = -intercept, b = -slope, col = 'blue')
abline(a = -intercept, b = -slope, col = 'blue')
abline(a = -intercept, b = -slope, col = 'blue')
intercept
intercept <- -intercept
slope <- -slope
slope
slope <- -slope
slope
plot(x_2, x_1, col = ifelse(y == 1, 'red', 'blue'))
abline(a = -theta[1] / theta[2], b = -theta[3] / theta[2])
abline(a = -theta[1] / theta[2], b = -theta[3] / theta[2], col = 'green')
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
theta <- c(1, 1)
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
theta <- c(1, 1)
lambda <- 5
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
theta <- c(1, 1)
lambda <- 0.1
View(x)
theta
sum(theta)
sum(theta[2:])
sum(theta[-1])
hypothesis <- function(theta, x) {
x %*% theta
}
cost_function <- function(theta, lambda, x, y) {
(sum((hypothesis(theta, x) - y) ^ 2) + (lambda * sum(theta[-1] ^ 2))) / (2 * length(y))
}
partial_derivative_cost_function <- function(theta, lambda, x, y) {
((t(x) %*% (hypothesis(theta, x) - y)) + (lambda * c(0, theta[-1]))) / length(y)
}
batch_gradient_descent <- function(theth, alpha, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, x, y))
theta <- theta - alpha * partial_derivative_cost_function(theta, x, y)
}
list(theta, cost)
}
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
theta <- c(1, 1)
lambda <- 0.1
hypothesis(theta, x)
((16 + 149) + 0.1 * 2) / 6
cost_function(theta, lambda, x, y)
((16 + 149) + 0.1 * 1) / 6
((16 + 40) + 0.1 * 1) / 6
partial_derivative_cost_function(theta, lambda, x, y)
-28.1 / 3
-28.1 / 3
(lambda * sum(theta[-1] ^ 2))
(lambda * c(0, theta[-1]))
(t(x) %*% (hypothesis(theta, x) - y))
partial_derivative_cost_function <- function(theta, lambda, x, y) {
((t(x) %*% (hypothesis(theta, x) - y)) + t(lambda * c(0, theta[-1]))) / length(y)
}
partial_derivative_cost_function(theta, lambda, x, y)
theta <- c(1, 1)
alpha <- 0.0005
itr  <- 50
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
l <- batch_gradient_descent(theta, alpha, itr, x, y)
partial_derivative_cost_function(theta, lambda, x, y)
partial_derivative_cost_function <- function(theta, lambda, x, y) {
((t(x) %*% (hypothesis(theta, x) - y)) + (lambda * c(0, theta[-1]))) / length(y)
}
hypothesis <- function(theta, x) {
x %*% theta
}
cost_function <- function(theta, lambda, x, y) {
(sum((hypothesis(theta, x) - y) ^ 2) + (lambda * sum(theta[-1] ^ 2))) / (2 * length(y))
}
partial_derivative_cost_function <- function(theta, lambda, x, y) {
((t(x) %*% (hypothesis(theta, x) - y)) + (lambda * c(0, theta[-1]))) / length(y)
}
batch_gradient_descent <- function(theth, alpha, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, x, y))
theta <- theta - alpha * partial_derivative_cost_function(theta, x, y)
}
list(theta, cost)
}
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
theta <- c(1, 1)
lambda <- 0.1
theta <- c(1, 1)
alpha <- 0.0005
itr  <- 50
l <- batch_gradient_descent(theta, alpha, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
cost_function(theta, x, y)
hypothesis <- function(theta, x) {
x %*% theta
}
cost_function <- function(theta, lambda, x, y) {
(sum((hypothesis(theta, x) - y) ^ 2) + (lambda * sum(theta[-1] ^ 2))) / (2 * length(y))
}
partial_derivative_cost_function <- function(theta, lambda, x, y) {
((t(x) %*% (hypothesis(theta, x) - y)) + (lambda * c(0, theta[-1]))) / length(y)
}
batch_gradient_descent <- function(theth, alpha, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, x, y))
theta <- theta - alpha * partial_derivative_cost_function(theta, x, y)
}
list(theta, cost)
}
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
lambda <- 0.1
theta <- c(1, 1)
alpha <- 0.0005
itr  <- 50
l <- batch_gradient_descent(theta, alpha, itr, x, y)
hypt
hypothesis(theta, x)
batch_gradient_descent <- function(theth, alpha, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, x, y))
print(cost)
theta <- theta - alpha * partial_derivative_cost_function(theta, x, y)
}
list(theta, cost)
}
theta <- c(1, 1)
alpha <- 0.0005
itr  <- 50
l <- batch_gradient_descent(theta, alpha, itr, x, y)
hypothesis <- function(theta, x) {
x %*% theta
}
cost_function <- function(theta, lambda, x, y) {
(sum((hypothesis(theta, x) - y) ^ 2) + (lambda * sum(theta[-1] ^ 2))) / (2 * length(y))
}
partial_derivative_cost_function <- function(theta, lambda, x, y) {
((t(x) %*% (hypothesis(theta, x) - y)) + (lambda * c(0, theta[-1]))) / length(y)
}
batch_gradient_descent <- function(theth, alpha, lambda, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, lambda, x, y))
print(cost)
theta <- theta - alpha * partial_derivative_cost_function(theta, lambda, x, y)
}
list(theta, cost)
}
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
lambda <- 0.1
theta <- c(1, 1)
alpha <- 0.0005
itr  <- 50
l <- batch_gradient_descent(theta, alpha, lambda, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
cost_function(theta, x, y)
hypothesis <- function(theta, x) {
x %*% theta
}
cost_function <- function(theta, lambda, x, y) {
(sum((hypothesis(theta, x) - y) ^ 2) + (lambda * sum(theta[-1] ^ 2))) / (2 * length(y))
}
partial_derivative_cost_function <- function(theta, lambda, x, y) {
((t(x) %*% (hypothesis(theta, x) - y)) + (lambda * c(0, theta[-1]))) / length(y)
}
batch_gradient_descent <- function(theth, alpha, lambda, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, lambda, x, y))
print(cost)
theta <- theta - alpha * partial_derivative_cost_function(theta, lambda, x, y)
}
list(theta, cost)
}
x <- matrix(c(rep(1, 3), 1:3), ncol = 2)
y <- c(4, 7, 10)
lambda <- 0.1
theta <- c(1, 1)
alpha <- 0.0005
itr  <- 50
l <- batch_gradient_descent(theta, alpha, lambda, itr, x, y)
l
batch_gradient_descent <- function(theth, alpha, lambda, itr, x, y) {
cost <- c()
for (i in 1:itr) {
cost <- c(cost, cost_function(theta, lambda, x, y))
theta <- theta - alpha * partial_derivative_cost_function(theta, lambda, x, y)
}
list(theta, cost)
}
l <- batch_gradient_descent(theta, alpha, lambda, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
theta
alpha <- 0.05
itr  <- 50
l <- batch_gradient_descent(theta, alpha, lambda, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
theta
n_itr <- 1:itr
plot(cost ~ n_itr)
alpha <- 0.1
l <- batch_gradient_descent(theta, alpha, lambda, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
alpha <- 0.3
itr  <- 50
l <- batch_gradient_descent(theta, alpha, lambda, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
itr  <- 500
l <- batch_gradient_descent(theta, alpha, lambda, itr, x, y)
theta <- l[[1]]
cost <- l[[2]]
n_itr <- 1:itr
plot(cost ~ n_itr)
theta
setwd("~/machine-learning-algorithms")
clear
ncol(x)
